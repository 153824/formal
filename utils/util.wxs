/**
 * @Description: 统一后端时间的返回格式，兼容IOS时间显示问题
 * @author: WE!D
 * @name: formatTime
 * @args: fullTime
 * @return: yyyy/mm/dd/ h:m:s
 * @date: 2020/6/18
*/
function formatTime(fullTime) {
  var timeStamp = Date.parse(fullTime);
  var date = getDate(timeStamp);
  var targetTime = "";
  var yyyy = date.getFullYear(),
      mm = date.getMonth() + 1 < 10 ? "0" + (date.getMonth()+1) : date.getMonth() + 1,
      dd = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(),
      h = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
      m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes(),
      s = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
  targetTime = yyyy + '/' + mm + '/' + dd +' '+ h +':'+ m+':'+ s;
  return targetTime;
};

var getMonthAndDayByFrag = function( fullTime,frag="/",transform=false){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  var m = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1,
      d = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
  return m + frag + d;
};

var getHourAndMinByFrag = function( fullTime,frag=":",transform=false ){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  var h = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
      m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
  return h + frag + m;
};

var getFullDateByFrag = function( fullTime,frag="/",transform=false ){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  return date.getFullYear()+frag+getMonthAndDayByFrag(fullTime,frag,transform);
};

var saveDouble = function(number){
  number = +number;
  return number.toFixed(1);
};

var hidePartPhoneNumber = function(phone){
  var targetPhone = phone;
  // var reg = new RegExp(/(\d{3})\d{4}(\d{4})/,'g');
  if( phone.length < 11 ){
    return "微信一键授权"
  }
  targetPhone = phone.replace(getRegExp("(\d{3})\d{4}(\d{4})"), '$1****$2');
  return targetPhone;
};

var toFix = function (value,tail=2) {
  return value.toFixed(tail);
};

var isSameDays = function (date) {
  var wxDate = getDate(date);
  var currDate = getDate();
  return (wxDate.setHours(0, 0, 0, 0) == currDate.setHours(0, 0, 0, 0));
}
/**
 * @return
 */
var ASCIIToChar = function(number){
  var options = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
  return options[number];
};

var isIncludes = function(array=[],item){
  if( array.indexOf(item) > -1 ){
    return true;
  }else{
    return false;
  }
};

var richTextFilter = function(nodeString=""){
  if(!nodeString){
    return "";
  }
  var targetNode = "<p></p>";
  targetNode = nodeString.replace(getRegExp("\<img","ig"), "<img class='question-stem-rich-text-img'");
  return targetNode;
};

var getOverRate = function(respCount,quesCount){
  return (respCount/quesCount).toFixed(2)*100
};


var getDesirability = function(verdict){
  var msg = ''
  switch(verdict){
    case 0:
      msg = '低'
      break
    case 1:
      msg = '正常'
      break
    case 2:
      msg = '较高'
      break
    case 3:
      msg = '高'
      break
  }
  return msg
};

var arrayEleIsSame = function(compare=[],target=[]){
  compare = compare.toString(),target = target.toString();
  if(compare === target){
    return true;
  }else{
    return false;
  }
};

var subString = function(string,start,end){
  if(string.length >= end){
    return string.substring(start,end);
  }
};

var computeSteps = function(score) {
  var defaultStep = Math.floor(score / 5);
  var steps = [];
  if(score <= 5) {
    var step = 1;
    for (var i = 0; i < score; i++) {
      steps.push(Math.floor(i * step));
    }
  }
  if(score > 5) {
    for (var i = 0; i < 5; i++) {
      steps.push(Math.floor(i * defaultStep));
    }
  }
  return  steps;
};

var computeStepNumber = function(score) {
  var defaultStep = 1;
  if(score <= 5){
    return defaultStep;
  } else {
    return Math.floor(score / 5)
  }
};

var isMiddleValue = function(questionStep, questionIndex, length) {
  var min = questionIndex - 3;
  var max = questionIndex + 3 >= length-1 ? length-1 : questionIndex + 3;
  console.log(min, questionIndex,questionStep, max)
  if(questionStep >= min && questionStep <= max){
    return true;
  }
  return false;
};
var getTimeMsg= function(data) {
  var verdict = data.duration.verdict;
  var rationalShortest = data.duration.rationalShortest;
  var rationalLongest = data.duration.rationalLongest;
  var msg = ''
  switch(verdict){
    case 'OVERLONG':
      msg='作答时长明显长于平均作答时间（'+ rationalShortest + '-' + rationalLongest + '分钟），' + '在自我评价过程中可能存在过度思考，犹豫不决或中途长时间退出后复答的情况'
      break
    case 'DECENT':
      msg='作答时间正常'
      break
    case 'HASTY':
      msg='作答时间明显短于平均作答时间（'+ rationalShortest + '-' + rationalLongest + '分钟），在自我评价过程中存在审题过快、不细致或选项习惯性（例如习惯性选中间项或最高项）的可能性'
      break
  }
  if (data.duration.countdownEnabled) {
    msg = "-"
  }
  return msg
};

var getDesirabilityMsg= function(index) {
  var msg = ''
  switch(index){
    case 0:
      msg='答题掩饰性低，受测者即使清楚社会赞许的正向行为是什么，也能够真诚面对自己，真实地作答'
      break
    case 1:
      msg='答题掩饰性正常，受测者比较清楚社会赞许的正向行为是什么，不接纳的行为是什么，但基本能够正视自己的真实情况，在自我评价中相对公正'
      break
    case 2:
      msg='答题掩饰性较高，受测者可能会因为清楚社会赞许的正向行为，而在自我评价中会低估自己的消极行为，高估自己的积极行为，和自己的实际情况可能会有一定的偏差'
      break
    case 3:
      msg='受测者答题掩饰性明显高于常规情况，对于社会欣赏和接纳的正向行为非常清晰和敏感，在自我评价中很有可能会为了给他人留下一个良好的印象，对自己的正向行为过度自信和高估，低估或保护掩饰消极行为。这可能来自于两种原因，一种是有意识有目的地进行伪装掩饰，另一种也可能来自于对信念的自我保护意识'
      break
  }
  return msg
};
/**
 * @Description: 计算MBTI报告图表样式
 * @author: WE!D
 * @name: computeMBTIChartPosition
 * @args: Number
 * @return: CSSStyle
 * @date: 2020/6/2
 */
var computeMBTIChartPosition = function (barWidth, widthRate, rate) {
  var borderStyle = '';
  var char = widthRate < 0 ? ' - ' : ' + ';
  var width = (barWidth / 2) * Math.abs(widthRate);
  var direction = widthRate < 0 ? 'right: 0;' : 'left: 0;';
  if(width === barWidth / 2 && widthRate < 0){
    borderStyle = 'border-top-left-radius: 26rpx;border-bottom-left-radius: 26rpx;';
    width = width - 5;
    direction = 'left: 0;';
  } else if (width === barWidth / 2 && widthRate > 0) {
    borderStyle = 'border-top-right-radius: 26rpx;border-bottom-right-radius: 26rpx;';
    width = width - 5;
    direction = 'right: 0;';
  }
  return 'width: ' + width + 'rpx;' + direction + borderStyle;
}

/**
 * @Description: 计算MBTI报告图表class
 * @author: WE!D
 * @name: computeChartClass
 * @args: Number
 * @return: ClassName
 * @date: 2020/6/3
 */
var computeChartClass = function (value) {
  var className = 'is-left-plain';
  if (value < 0) {
    className = 'is-right-plain';
  }
  console.log(Math.abs(value) <= 0.11);
  if (Math.abs(value) <= 0.11 && Math.abs(value) != 0) {
    return 'is-plain ' + className
  }
  return '';
}

var slice = function (arr, len) {
  console.log('slice: ',arr);
  if(arr.length >= len) {
    return arr.slice(0, len)
  } else {
    return arr
  }
}

var gentRichText= function (text, style) {
  style = 'overflow: hidden;text-overflow: ellipsis;white-space: nowrap;' + style
  return '<p style="' + style + '">' + text + '</p>'
}

var gentBackgroundImage = function (backgroundArr, index) {
  var targetIndex = index%4;
  return backgroundArr[targetIndex];
}

var gentClassOfType = function (string, query) {
  if(string.indexOf("热门") > -1){
    return 'hot'
  }
  if(string.indexOf("最新") > -1){
    return 'new'
  }
}

var gentReleaseType = function (code) {
  var text = '';
  code = code.toLowerCase();
  switch (code) {
    case 'self':
      text = '自己测';
      break;
    case 'contacts':
      text = '通讯录';
      break;
    case 'email':
      text = '邮件';
      break;
    case 'qrcode':
      text = '二维码';
      break;
    case 'ticket':
      text = '答题账号';
      break;
  }
  return text;
}

var getCount = function (index, arr) {
  console.log(arr[index]);
  return arr[index]
}

var gentDistributeClass = function (rowIndex, columnIndex, rowCount, columnCount) {
  var className = '';
  rowCount = Number(rowCount - 1);
  columnCount = Number(columnCount - 1);
  rowIndex = Number(rowIndex);
  columnIndex = Number(columnIndex);
  if(columnIndex === 0){
    className = className + ' first-column';
  }
  if(rowIndex === 0 && columnIndex === 0){
    className = className + ' first-column-first-row';
  }
  if(columnCount === columnIndex && rowIndex === 0){
    className = className + ' last-column-first-row';
  }
  if(columnIndex === 0 && rowCount === rowIndex){
    className = className + ' first-column-last-row';
  }
  if(columnCount === columnIndex && rowCount === rowIndex){
    className = className + ' last-column-last-row';
  }
  if(columnIndex === 1){
    className = className + ' second-column';
  }
  if(columnIndex === columnCount){
    className = className + ' last-column';
  }
  // wxs无法循环object故而放弃
  // var classNameMap = {
  //   'first-column': columnIndex === 0,
  //   'first-column-first-row': rowIndex === 0 && columnIndex === 0,
  //   'last-column-first-row': columnCount === columnIndex && rowIndex === 0,
  //   'first-column-last-row': columnIndex === 0 && rowCount === rowIndex,
  //   'last-column-last-row': columnCount === columnIndex && rowCount === rowIndex,
  //   'second-column': columnIndex === 1,
  //   'last-column': columnIndex === columnIndex
  // }

  return className;
}

var gentDistributeStyle = function (rowCount, columnCount) {
  var style = 'grid-template-columns: 80rpx repeat(' + columnCount +', minmax(168rpx, auto));grid-template-rows: 160rpx repeat('+ rowCount +', minmax(140rpx， auto));';
  return style
}

var gentRankStyle = function (columnCount) {
  var style = 'grid-template-columns: repeat(' + columnCount +', minmax(100rpx, auto));';
  return style;
}

var gentBarStyle = function (data, grade, height) {
  var itemHeight = height / data.intervals[0].high;
  return 'height: ' + itemHeight * grade + 'rpx;';
}

var gentBarYAxisStyle = function (data, height) {
  var itemHeight = height / data.intervals[0].high;
  var style = '';
  // grid-template-rows: repeat(3, 107rpx);
  data.intervals.forEach(function (item) {
    var rowHeight = (item.high - item.low) * itemHeight + 'rpx ';
    style = style + rowHeight
  });
  return 'grid-template-rows: '+ style +';'
}

module.exports = {
  getMonthAndDayByFrag: getMonthAndDayByFrag,
  getHourAndMinByFrag: getHourAndMinByFrag,
  getFullDateByFrag: getFullDateByFrag,
  saveDouble: saveDouble,
  getDesirabilityMsg:getDesirabilityMsg,
  hidePartPhoneNumber: hidePartPhoneNumber,
  ASCIIToChar: ASCIIToChar,
  isIncludes: isIncludes,
  toFix: toFix,
  getTimeMsg:getTimeMsg,
  richTextFilter: richTextFilter,
  isSameDays: isSameDays,
  arrayEleIsSame: arrayEleIsSame,
  getDesirability:getDesirability,
  getOverRate:getOverRate,
  subString: subString,
  computeSteps: computeSteps,
  computeStepNumber: computeStepNumber,
  isMiddleValue: isMiddleValue,
  computeMBTIChartPosition: computeMBTIChartPosition,
  computeChartClass: computeChartClass,
  slice: slice,
  gentRichText: gentRichText,
  gentBackgroundImage: gentBackgroundImage,
  gentClassOfType: gentClassOfType,
  gentReleaseType: gentReleaseType,
  getCount: getCount,
  gentDistributeClass: gentDistributeClass,
  gentDistributeStyle: gentDistributeStyle,
  gentRankStyle: gentRankStyle,
  gentBarStyle: gentBarStyle,
  gentBarYAxisStyle: gentBarYAxisStyle
};
