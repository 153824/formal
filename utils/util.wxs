/**
 * @Description: 统一后端时间的返回格式，兼容IOS时间显示问题
 * @author: WE!D
 * @name: formatTime
 * @args: fullTime
 * @return: yyyy/mm/dd/ h:m:s
 * @date: 2020/6/18
*/
function formatTime(fullTime) {
  var timeStamp = Date.parse(fullTime);
  var date = getDate(timeStamp);
  var targetTime = "";
  var yyyy = date.getFullYear(),
      mm = date.getMonth() + 1 < 10 ? "0" + (date.getMonth()+1) : date.getMonth() + 1,
      dd = date.getDate() < 10 ? "0" + date.getDate() : date.getDate(),
      h = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
      m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes(),
      s = date.getSeconds() < 10 ? "0" + date.getSeconds() : date.getSeconds();
  targetTime = yyyy + '/' + mm + '/' + dd +' '+ h +':'+ m+':'+ s;
  return targetTime;
};

var getMonthAndDayByFrag = function( fullTime,frag="/",transform=false){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  var m = date.getMonth() + 1 < 10 ? "0" + (date.getMonth() + 1) : date.getMonth() + 1,
      d = date.getDate() < 10 ? "0" + date.getDate() : date.getDate();
  return m + frag + d;
};

var getHourAndMinByFrag = function( fullTime,frag=":",transform=false ){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  var h = date.getHours() < 10 ? "0" + date.getHours() : date.getHours(),
      m = date.getMinutes() < 10 ? "0" + date.getMinutes() : date.getMinutes();
  return h + frag + m;
};

var getFullDateByFrag = function( fullTime,frag="/",transform=false ){
  var date = getDate(fullTime);
  if( transform ){
    date = getDate(formatTime(fullTime));
  }else{
    date = getDate(fullTime.replace(getRegExp('-','g'),'/'));
  }
  return date.getFullYear()+frag+getMonthAndDayByFrag(fullTime,frag,transform);
};

var saveDouble = function(number){
  number = +number;
  return number.toFixed(1);
};

var hidePartPhoneNumber = function(phone){
  var targetPhone = phone;
  // var reg = new RegExp(/(\d{3})\d{4}(\d{4})/,'g');
  if( phone.length < 11 ){
    return "微信一键授权"
  }
  targetPhone = phone.replace(getRegExp("(\d{3})\d{4}(\d{4})"), '$1****$2');
  return targetPhone;
};

var toFix = function (value,tail=2) {
  return value.toFixed(tail);
};

var isSameDays = function (date) {
  var wxDate = getDate(date);
  var currDate = getDate();
  return (wxDate.setHours(0, 0, 0, 0) == currDate.setHours(0, 0, 0, 0));
}
/**
 * @return
 */
var ASCIIToChar = function(number){
  var options = ['A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z']
  return options[number];
};

var isIncludes = function(array=[],item){
  if( array.indexOf(item) > -1 ){
    return true;
  }else{
    return false;
  }
};

var richTextFilter = function(nodeString=""){
  if(!nodeString){
    return "";
  }
  var targetNode = "<p></p>";
  targetNode = nodeString.replace(getRegExp("\<img","ig"), "<img class='question-stem-rich-text-img'");
  return targetNode;
};

var arrayEleIsSame = function(compare=[],target=[]){
  compare = compare.toString(),target = target.toString();
  if(compare === target){
    return true;
  }else{
    return false;
  }
};

var subString = function(string,start,end){
  if(string.length >= end){
    return string.substring(start,end);
  }
};

var computeSteps = function(score) {
  var defaultStep = Math.floor(score / 5);
  var steps = [];
  if(score <= 5) {
    var step = 1;
    for (var i = 0; i < score; i++) {
      steps.push(Math.floor(i * step));
    }
  }
  if(score > 5) {
    for (var i = 0; i < 5; i++) {
      steps.push(Math.floor(i * defaultStep));
    }
  }
  return  steps;
};

var computeStepNumber = function(score) {
  var defaultStep = 1;
  if(score <= 5){
    return defaultStep;
  } else {
    return Math.floor(score / 5)
  }
};

var isMiddleValue = function(questionStep, questionIndex, length) {
  var min = questionIndex - 3;
  var max = questionIndex + 3 >= length-1 ? length-1 : questionIndex + 3;
  console.log(min, questionIndex,questionStep, max)
  if(questionStep >= min && questionStep <= max){
    return true;
  }
  return false;
};

/**
 * @Description: 计算MBTI报告图表样式
 * @author: WE!D
 * @name: computeMBTIChartPosition
 * @args: Number
 * @return: CSSStyle
 * @date: 2020/6/2
 */
var computeMBTIChartPosition = function (barWidth, widthRate, rate) {
  var borderStyle = '';
  var char = widthRate < 0 ? ' - ' : ' + ';
  var width = (barWidth / 2) * Math.abs(widthRate);
  if(width === barWidth / 2 && widthRate < 0){
    borderStyle = 'border-top-left-radius: 26rpx;border-bottom-left-radius: 26rpx;';
  } else if (width === barWidth / 2 && widthRate > 0) {
    borderStyle = 'border-top-right-radius: 26rpx;border-bottom-right-radius: 26rpx;';
  }
  console.log('widthRate: ', widthRate, width);
  return 'width: ' + width + 'rpx;' + 'left: calc(50%' + char + (width/2) + 'rpx);' + borderStyle;
}

module.exports = {
  getMonthAndDayByFrag: getMonthAndDayByFrag,
  getHourAndMinByFrag: getHourAndMinByFrag,
  getFullDateByFrag: getFullDateByFrag,
  saveDouble: saveDouble,
  hidePartPhoneNumber: hidePartPhoneNumber,
  ASCIIToChar: ASCIIToChar,
  isIncludes: isIncludes,
  toFix: toFix,
  richTextFilter: richTextFilter,
  isSameDays: isSameDays,
  arrayEleIsSame: arrayEleIsSame,
  subString: subString,
  computeSteps: computeSteps,
  computeStepNumber: computeStepNumber,
  isMiddleValue: isMiddleValue,
  computeMBTIChartPosition: computeMBTIChartPosition
};
